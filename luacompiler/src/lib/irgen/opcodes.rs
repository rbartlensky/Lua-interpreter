use bytecode::instructions::Opcode;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum IROpcode {
    Mov,
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    FDiv,
    Exp,
    GetAttr,
    SetAttr,
    Closure,
    Call,
    Push,
    VarArg,
    Eq,
    MovR,
    Ret,
    SetTop,
    GetUpAttr,
    SetUpAttr,
    Jmp,
    JmpNe,
    Lt,
    Gt,
    Le,
    Ge,
    Ne,
    JmpEq,
    GetUpVal,
    SetUpVal,
    Umn,
    Phi,
}

impl IROpcode {
    pub fn to_opcode(&self) -> Opcode {
        match *self {
            IROpcode::Mov => Opcode::Mov,
            IROpcode::Add => Opcode::Add,
            IROpcode::Sub => Opcode::Sub,
            IROpcode::Mul => Opcode::Mul,
            IROpcode::Div => Opcode::Div,
            IROpcode::Mod => Opcode::Mod,
            IROpcode::FDiv => Opcode::FDiv,
            IROpcode::Exp => Opcode::Exp,
            IROpcode::GetAttr => Opcode::GetAttr,
            IROpcode::SetAttr => Opcode::SetAttr,
            IROpcode::Closure => Opcode::Closure,
            IROpcode::Call => Opcode::Call,
            IROpcode::Push => Opcode::Push,
            IROpcode::VarArg => Opcode::VarArg,
            IROpcode::Eq => Opcode::Eq,
            IROpcode::MovR => Opcode::MovR,
            IROpcode::Ret => Opcode::Ret,
            IROpcode::SetTop => Opcode::SetTop,
            IROpcode::GetUpAttr => Opcode::GetUpAttr,
            IROpcode::SetUpAttr => Opcode::SetUpAttr,
            IROpcode::Jmp => Opcode::Jmp,
            IROpcode::JmpNe => Opcode::JmpNe,
            IROpcode::Lt => Opcode::Lt,
            IROpcode::Gt => Opcode::Gt,
            IROpcode::Le => Opcode::Le,
            IROpcode::Ge => Opcode::Ge,
            IROpcode::Ne => Opcode::Ne,
            IROpcode::JmpEq => Opcode::JmpEq,
            IROpcode::GetUpVal => Opcode::GetUpVal,
            IROpcode::SetUpVal => Opcode::SetUpVal,
            IROpcode::Umn => Opcode::Umn,
            _ => panic!("Cannot convert {:?} to opcode!", self),
        }
    }
}
